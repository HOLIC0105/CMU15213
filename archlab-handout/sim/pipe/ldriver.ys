#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-7, %rdx
	jle Done8		# if so, goto Done1:
Loop8:	
  mrmovq (%rdi), %r8	
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11	
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rbx
	andq %r8, %r8	
	rmmovq %r8, 0(%rsi)	
	jle Npos81		
	iaddq $1, %rax	
Npos81:
	andq %r9, %r9	
	rmmovq %r9, 8(%rsi)	
	jle Npos82		
	iaddq $1, %rax	
Npos82:
	andq %r10, %r10		
	rmmovq %r10, 16(%rsi)	
	jle Npos83	
	iaddq $1, %rax	
Npos83:
	andq %r11, %r11
	rmmovq %r11, 24(%rsi)	
	jle Npos84		
	iaddq $1, %rax	
Npos84:
	andq %r12, %r12	
	rmmovq %r12, 32(%rsi)		
	jle Npos85		
	iaddq $1, %rax	
Npos85:
	andq %r13, %r13
	rmmovq %r13, 40(%rsi)	
	jle Npos86		
	iaddq $1, %rax	
Npos86:
	andq %r14, %r14
	rmmovq %r14, 48(%rsi)	
	jle Npos87	
	iaddq $1, %rax	
Npos87:
	andq %rbx, %rbx	
	rmmovq %rbx, 56(%rsi)	
	jle Npos88		
	iaddq $1, %rax	
Npos88:		
	iaddq $64, %rdi	
	iaddq $64, %rsi	
	iaddq $-8, %rdx			
	jg Loop8		
Done8:	
	iaddq $4, %rdx
	jle Between0to3
Between4to7:
	iaddq $-2, %rdx
	jle Between4to5
Between6to7:	
	iaddq $-1, %rdx 
	je Len6
	mrmovq 48(%rdi), %r8
	jmp len7
Between4to5:
	jne Len4		
	mrmovq 32(%rdi), %r9
	jmp len5
Between0to3:
	iaddq $2, %rdx
	jle Between0to1
Between2to3:
	iaddq $-1, %rdx
	jle Len2
	mrmovq 16(%rdi), %r9
	jmp len3
Between0to1:
	mrmovq (%rdi), %r9
	je len1
	ret
len7:
	andq %r8, %r8	
	rmmovq %r8, 48(%rsi)
	mrmovq 40(%rdi), %r8
	jle len6		
	iaddq $1, %rax	
Len6:
	mrmovq 40(%rdi), %r8
len6:
	mrmovq 32(%rdi), %r9
	andq %r8, %r8	
	rmmovq %r8, 40(%rsi)
	jle len5		
	iaddq $1, %rax	
len5:
	andq %r9, %r9	
	rmmovq %r9, 32(%rsi)
	mrmovq 24(%rdi), %r8
	jle len4		
	iaddq $1, %rax	
Len4:
	mrmovq 24(%rdi), %r8
len4:
	mrmovq 16(%rdi), %r9
	andq %r8, %r8		
	rmmovq %r8, 24(%rsi)
	jle len3		
	iaddq $1, %rax	
len3:
	andq %r9, %r9
	rmmovq %r9, 16(%rsi)
	mrmovq 8(%rdi), %r8
	jle len2		
	iaddq $1, %rax
Len2:
	mrmovq 8(%rdi), %r8
len2:
	mrmovq (%rdi), %r9
	andq %r8, %r8		
	rmmovq %r8, 8(%rsi)
	jle len1		
	iaddq $1, %rax	
len1:
	andq %r9, %r9
	rmmovq %r9, (%rsi)
	jle Done		
	iaddq $1, %rax	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:	
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad -3
	.quad 4
	.quad 5
	.quad 6
	.quad 7
	.quad -8
	.quad 9
	.quad 10
	.quad -11
	.quad -12
	.quad -13
	.quad -14
	.quad -15
	.quad -16
	.quad 17
	.quad 18
	.quad -19
	.quad 20
	.quad -21
	.quad 22
	.quad 23
	.quad -24
	.quad 25
	.quad -26
	.quad -27
	.quad -28
	.quad 29
	.quad -30
	.quad 31
	.quad 32
	.quad -33
	.quad -34
	.quad -35
	.quad 36
	.quad -37
	.quad -38
	.quad 39
	.quad -40
	.quad -41
	.quad 42
	.quad 43
	.quad -44
	.quad -45
	.quad -46
	.quad 47
	.quad 48
	.quad -49
	.quad 50
	.quad -51
	.quad 52
	.quad -53
	.quad -54
	.quad -55
	.quad 56
	.quad 57
	.quad 58
	.quad 59
	.quad -60
	.quad -61
	.quad 62
	.quad 63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
