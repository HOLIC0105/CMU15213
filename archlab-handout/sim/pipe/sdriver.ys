#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-7, %rdx
	jle Done8		# if so, goto Done1:
Loop8:	
  mrmovq 0(%rdi), %r8	
	iaddq $-8, %rdx		
	andq %r8, %r8	
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	jle Npos81		
	iaddq $1, %rax	
Npos81:
	andq %r9, %r9	
	mrmovq 24(%rdi), %r11		
	mrmovq 32(%rdi), %r12
	jle Npos82		
	iaddq $1, %rax	
Npos82:
	andq %r10, %r10	
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	jle Npos83	
	iaddq $1, %rax	
Npos83:
	andq %r11, %r11
	mrmovq 56(%rdi), %rbx
	rmmovq %r8, 0(%rsi)	
	jle Npos84		
	iaddq $1, %rax	
Npos84:
	andq %r12, %r12	
	rmmovq %r9, 8(%rsi)	
	rmmovq %r10, 16(%rsi)	
	jle Npos85		
	iaddq $1, %rax	
Npos85:
	andq %r13, %r13
	rmmovq %r11, 24(%rsi)		
	rmmovq %r12, 32(%rsi)	
	jle Npos86		
	iaddq $1, %rax	
Npos86:
	andq %r14, %r14
	rmmovq %r13, 40(%rsi)	
	rmmovq %r14, 48(%rsi)	
	jle Npos87	
	iaddq $1, %rax	
Npos87:
	andq %rbx, %rbx	
	rmmovq %rbx, 56(%rsi)	
	jle Npos88		
	iaddq $1, %rax	
Npos88:		
	iaddq $64, %rdi	
	iaddq $64, %rsi	
	andq %rdx,%rdx	
	jg Loop8		
Done8:	
	iaddq $4, %rdx
	jle Between0to3
	mrmovq 0(%rdi), %r8	
	mrmovq 8(%rdi), %r9
	andq %r8, %r8	
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	jle Npos41		
	iaddq $1, %rax	
Npos41:
	andq %r9, %r9	
	rmmovq %r8, 0(%rsi)
	rmmovq %r9, 8(%rsi)
	jle Npos42		
	iaddq $1, %rax	
Npos42:
	andq %r10, %r10	
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)	
	jle Npos43	
	iaddq $1, %rax	
Npos43:
	andq %r11, %r11	
	jle Npos44		
	iaddq $1, %rax	
Npos44:
	iaddq $32, %rdi	
	iaddq $32, %rsi		
Between4to7:
	iaddq $-2, %rdx
	jle Between4to5
Between6to7:
	iaddq $-1, %rdx
	je len2
	jmp len3
Between4to5:
	jne Done
	jmp len1
Between0to3:
	iaddq $2, %rdx
	jle Between0to1
Between2to3:
	iaddq $-1, %rdx
	jle len2
len3:
	mrmovq 0(%rdi), %r8	
	mrmovq 8(%rdi), %r9
	andq %r8, %r8	
	mrmovq 16(%rdi), %r10
	rmmovq %r8, 0(%rsi)
	jle Npos31		
	iaddq $1, %rax	
Npos31:
	andq %r9, %r9	
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	jle Npos32		
	iaddq $1, %rax	
Npos32:
	andq %r10, %r10		
	jle Npos33	
	iaddq $1, %rax	
Npos33:
	ret
len2:
	mrmovq 0(%rdi), %r8	
	mrmovq 8(%rdi), %r9
	andq %r8, %r8	
	rmmovq %r8, 0(%rsi)
	rmmovq %r9, 8(%rsi)
	jle Npos21		
	iaddq $1, %rax	
Npos21:
	andq %r9, %r9	
	jle Npos22		
	iaddq $1, %rax	
Npos22:
	ret:
Between0to1:
	jne Done
len1:
	mrmovq 0(%rdi), %r8	
	andq %r8, %r8	
	rmmovq %r8, 0(%rsi)
	jle Npos11		
	iaddq $1, %rax	
Npos11:
	ret
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:	
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad 3
	.quad -4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
