Team Name:HOLIC0105
Member 1 :holic:3485995896@qq.com
Measuring performance with gettimeofday().

Testing mm malloc
Reading tracefile: short1-bal.rep
Checking mm_malloc for correctness, 
used heapsize = 4192
##########FREELIST##########
[16, 32] : (0xef3ff010)
[32, 64] : (0xef3ff018)
[64, 128] : (0xef3ff020)
[128, 256] : (0xef3ff028)
[256, 512] : (0xef3ff030)
[512, 1024] : (0xef3ff038)
[1024, 2048] : (0xef3ff040)
[2048, 4096] : (0xef3ff048) -> (0xef3ff070)[size = 4096]
[4096, 8192] : (0xef3ff050)
[8192, 16384] : (0xef3ff058)
############################
##########BLOCKLIST##########
1 : (0xef3ff064, 0xef3ff068, 0xef3ff068)[size = 8, prev_block_empty = 0, allocated = 1]
2 : (0xef3ff06c, 0xef3ff070, 0xef400068)[size = 4096, prev_block_empty = 0, allocated = 0]
3 : (0xef40006c)[size = 0, prev_block_empty = 2, allocated = 1]
#############################

2040

used heapsize = 4192
##########FREELIST##########
[16, 32] : (0xef3ff010)
[32, 64] : (0xef3ff018)
[64, 128] : (0xef3ff020)
[128, 256] : (0xef3ff028)
[256, 512] : (0xef3ff030)
[512, 1024] : (0xef3ff038)
[1024, 2048] : (0xef3ff040) -> (0xef3ff870)[size = 2048]
[2048, 4096] : (0xef3ff048)
[4096, 8192] : (0xef3ff050)
[8192, 16384] : (0xef3ff058)
############################
##########BLOCKLIST##########
1 : (0xef3ff064, 0xef3ff068, 0xef3ff068)[size = 8, prev_block_empty = 0, allocated = 1]
2 : (0xef3ff06c, 0xef3ff070, 0xef3ff868)[size = 2048, prev_block_empty = 0, allocated = 1]
3 : (0xef3ff86c, 0xef3ff870, 0xef400068)[size = 2048, prev_block_empty = 0, allocated = 0]
4 : (0xef40006c)[size = 0, prev_block_empty = 2, allocated = 1]
#############################

2040

used heapsize = 4192
##########FREELIST##########
[16, 32] : (0xef3ff010)
[32, 64] : (0xef3ff018)
[64, 128] : (0xef3ff020)
[128, 256] : (0xef3ff028)
[256, 512] : (0xef3ff030)
[512, 1024] : (0xef3ff038)
[1024, 2048] : (0xef3ff040)
[2048, 4096] : (0xef3ff048)
[4096, 8192] : (0xef3ff050)
[8192, 16384] : (0xef3ff058)
############################
##########BLOCKLIST##########
1 : (0xef3ff064, 0xef3ff068, 0xef3ff068)[size = 8, prev_block_empty = 0, allocated = 1]
2 : (0xef3ff06c, 0xef3ff070, 0xef3ff868)[size = 2048, prev_block_empty = 0, allocated = 1]
3 : (0xef3ff86c, 0xef3ff870, 0xef400068)[size = 2048, prev_block_empty = 0, allocated = 1]
4 : (0xef40006c)[size = 0, prev_block_empty = 0, allocated = 1]
#############################


used heapsize = 4192
##########FREELIST##########
[16, 32] : (0xef3ff010)
[32, 64] : (0xef3ff018)
[64, 128] : (0xef3ff020)
[128, 256] : (0xef3ff028)
[256, 512] : (0xef3ff030)
[512, 1024] : (0xef3ff038)
[1024, 2048] : (0xef3ff040) -> (0xef3ff870)[size = 2048]
[2048, 4096] : (0xef3ff048)
[4096, 8192] : (0xef3ff050)
[8192, 16384] : (0xef3ff058)
############################
##########BLOCKLIST##########
1 : (0xef3ff064, 0xef3ff068, 0xef3ff068)[size = 8, prev_block_empty = 0, allocated = 1]
2 : (0xef3ff06c, 0xef3ff070, 0xef3ff868)[size = 2048, prev_block_empty = 0, allocated = 1]
3 : (0xef3ff86c, 0xef3ff870, 0xef400068)[size = 2048, prev_block_empty = 0, allocated = 0]
4 : (0xef40006c)[size = 0, prev_block_empty = 2, allocated = 1]
#############################

48

used heapsize = 4192
##########FREELIST##########
[16, 32] : (0xef3ff010)
[32, 64] : (0xef3ff018)
[64, 128] : (0xef3ff020)
[128, 256] : (0xef3ff028)
[256, 512] : (0xef3ff030)
[512, 1024] : (0xef3ff038)
[1024, 2048] : (0xef3ff040) -> (0xef3ff8a8)[size = 1992]
[2048, 4096] : (0xef3ff048)
[4096, 8192] : (0xef3ff050)
[8192, 16384] : (0xef3ff058)
############################
##########BLOCKLIST##########
1 : (0xef3ff064, 0xef3ff068, 0xef3ff068)[size = 8, prev_block_empty = 0, allocated = 1]
2 : (0xef3ff06c, 0xef3ff070, 0xef3ff868)[size = 2048, prev_block_empty = 0, allocated = 1]
3 : (0xef3ff86c, 0xef3ff870, 0xef3ff8a0)[size = 56, prev_block_empty = 0, allocated = 1]
4 : (0xef3ff8a4, 0xef3ff8a8, 0xef400068)[size = 1992, prev_block_empty = 0, allocated = 0]
5 : (0xef40006c)[size = 0, prev_block_empty = 2, allocated = 1]
#############################

4072

used heapsize = 8272
##########FREELIST##########
[16, 32] : (0xef3ff010)
[32, 64] : (0xef3ff018)
[64, 128] : (0xef3ff020)
[128, 256] : (0xef3ff028)
[256, 512] : (0xef3ff030)
[512, 1024] : (0xef3ff038)
[1024, 2048] : (0xef3ff040)
[2048, 4096] : (0xef3ff048)
[4096, 8192] : (0xef3ff050)
[8192, 16384] : (0xef3ff058)
############################
##########BLOCKLIST##########
1 : (0xef3ff064, 0xef3ff068, 0xef3ff068)[size = 8, prev_block_empty = 0, allocated = 1]
2 : (0xef3ff06c, 0xef3ff070, 0xef3ff868)[size = 2048, prev_block_empty = 0, allocated = 1]
3 : (0xef3ff86c, 0xef3ff870, 0xef3ff8a0)[size = 56, prev_block_empty = 0, allocated = 1]
4 : (0xef3ff8a4, 0xef3ff8a8, 0xef401058)[size = 6072, prev_block_empty = 0, allocated = 1]
5 : (0xef40105c)[size = 0, prev_block_empty = 2, allocated = 1]
#############################


used heapsize = 8272
##########FREELIST##########
[16, 32] : (0xef3ff010)
[32, 64] : (0xef3ff018)
[64, 128] : (0xef3ff020)
[128, 256] : (0xef3ff028)
[256, 512] : (0xef3ff030)
[512, 1024] : (0xef3ff038)
[1024, 2048] : (0xef3ff040)
[2048, 4096] : (0xef3ff048)
[4096, 8192] : (0xef3ff050) -> (0xef3ff8a8)[size = 6072]
[8192, 16384] : (0xef3ff058)
############################
##########BLOCKLIST##########
1 : (0xef3ff064, 0xef3ff068, 0xef3ff068)[size = 8, prev_block_empty = 0, allocated = 1]
2 : (0xef3ff06c, 0xef3ff070, 0xef3ff868)[size = 2048, prev_block_empty = 0, allocated = 1]
3 : (0xef3ff86c, 0xef3ff870, 0xef3ff8a0)[size = 56, prev_block_empty = 0, allocated = 1]
4 : (0xef3ff8a4, 0xef3ff8a8, 0xef401058)[size = 6072, prev_block_empty = 0, allocated = 0]
5 : (0xef40105c)[size = 0, prev_block_empty = 2, allocated = 1]
#############################

4072

used heapsize = 8272
##########FREELIST##########
[16, 32] : (0xef3ff010)
[32, 64] : (0xef3ff018)
[64, 128] : (0xef3ff020)
[128, 256] : (0xef3ff028)
[256, 512] : (0xef3ff030)
[512, 1024] : (0xef3ff038)
[1024, 2048] : (0xef3ff040) -> (0xef400898)[size = 1992]
[2048, 4096] : (0xef3ff048)
[4096, 8192] : (0xef3ff050)
[8192, 16384] : (0xef3ff058)
############################
##########BLOCKLIST##########
1 : (0xef3ff064, 0xef3ff068, 0xef3ff068)[size = 8, prev_block_empty = 0, allocated = 1]
2 : (0xef3ff06c, 0xef3ff070, 0xef3ff868)[size = 2048, prev_block_empty = 0, allocated = 1]
3 : (0xef3ff86c, 0xef3ff870, 0xef3ff8a0)[size = 56, prev_block_empty = 0, allocated = 1]
4 : (0xef3ff8a4, 0xef3ff8a8, 0xef400890)[size = 4080, prev_block_empty = 0, allocated = 1]
5 : (0xef400894, 0xef400898, 0xef401058)[size = 1992, prev_block_empty = 0, allocated = 0]
6 : (0xef40105c)[size = 0, prev_block_empty = 2, allocated = 1]
#############################


used heapsize = 8272
##########FREELIST##########
[16, 32] : (0xef3ff010)
[32, 64] : (0xef3ff018)
[64, 128] : (0xef3ff020)
[128, 256] : (0xef3ff028)
[256, 512] : (0xef3ff030)
[512, 1024] : (0xef3ff038)
[1024, 2048] : (0xef3ff040) -> (0xef3ff070)[size = 2048] -> (0xef400898)[size = 1992]
[2048, 4096] : (0xef3ff048)
[4096, 8192] : (0xef3ff050)
[8192, 16384] : (0xef3ff058)
############################
##########BLOCKLIST##########
1 : (0xef3ff064, 0xef3ff068, 0xef3ff068)[size = 8, prev_block_empty = 0, allocated = 1]
2 : (0xef3ff06c, 0xef3ff070, 0xef3ff868)[size = 2048, prev_block_empty = 0, allocated = 0]
3 : (0xef3ff86c, 0xef3ff870, 0xef3ff8a0)[size = 56, prev_block_empty = 2, allocated = 1]
4 : (0xef3ff8a4, 0xef3ff8a8, 0xef400890)[size = 4080, prev_block_empty = 0, allocated = 1]
5 : (0xef400894, 0xef400898, 0xef401058)[size = 1992, prev_block_empty = 0, allocated = 0]
6 : (0xef40105c)[size = 0, prev_block_empty = 2, allocated = 1]
#############################


used heapsize = 8272
##########FREELIST##########
[16, 32] : (0xef3ff010)
[32, 64] : (0xef3ff018)
[64, 128] : (0xef3ff020)
[128, 256] : (0xef3ff028)
[256, 512] : (0xef3ff030)
[512, 1024] : (0xef3ff038)
[1024, 2048] : (0xef3ff040) -> (0xef400898)[size = 1992]
[2048, 4096] : (0xef3ff048) -> (0xef3ff070)[size = 2104]
[4096, 8192] : (0xef3ff050)
[8192, 16384] : (0xef3ff058)
############################
##########BLOCKLIST##########
1 : (0xef3ff064, 0xef3ff068, 0xef3ff068)[size = 8, prev_block_empty = 0, allocated = 1]
2 : (0xef3ff06c, 0xef3ff070, 0xef3ff8a0)[size = 2104, prev_block_empty = 0, allocated = 0]
3 : (0xef3ff8a4, 0xef3ff8a8, 0xef400890)[size = 4080, prev_block_empty = 2, allocated = 1]
4 : (0xef400894, 0xef400898, 0xef401058)[size = 1992, prev_block_empty = 0, allocated = 0]
5 : (0xef40105c)[size = 0, prev_block_empty = 2, allocated = 1]
#############################

4072

used heapsize = 12352
##########FREELIST##########
[16, 32] : (0xef3ff010)
[32, 64] : (0xef3ff018)
[64, 128] : (0xef3ff020)
[128, 256] : (0xef3ff028)
[256, 512] : (0xef3ff030)
[512, 1024] : (0xef3ff038)
[1024, 2048] : (0xef3ff040) -> (0xef400898)[size = 6072]
[2048, 4096] : (0xef3ff048) -> (0xef3ff070)[size = 2104]
[4096, 8192] : (0xef3ff050)
[8192, 16384] : (0xef3ff058)
############################
##########BLOCKLIST##########
1 : (0xef3ff064, 0xef3ff068, 0xef3ff068)[size = 8, prev_block_empty = 0, allocated = 1]
2 : (0xef3ff06c, 0xef3ff070, 0xef3ff8a0)[size = 2104, prev_block_empty = 0, allocated = 0]
3 : (0xef3ff8a4, 0xef3ff8a8, 0xef400890)[size = 4080, prev_block_empty = 2, allocated = 1]
4 : (0xef400894, 0xef400898, 0xef402048)[size = 6072, prev_block_empty = 0, allocated = 1]
5 : (0xef40204c)[size = 0, prev_block_empty = 2, allocated = 1]
#############################

